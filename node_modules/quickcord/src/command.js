'use strict';

const EventEmitter = require('events');
const path = require('path');
const fs = require('fs');
const Discord = require('discord.js');

class CommandHandler extends EventEmitter {
    constructor(token, prefix = ['.']) {
        super();

        this._reservedEvents = ['loaded'];

        this.setMaxListeners(0);

        this._client = new Discord.Client();
        this._client.login(token)
        .then(result => {
            this.emit('loaded', 'Connection to Discord API established');
        })
        .catch(err => {
            this.destroy();
            throw err;
        });

        this._client.on('message', response => {
            const { content } = response;

            let prefixResult;

            if(typeof prefix === 'object') {
                prefixResult = prefix.find(current => current == content[0]);
            } else {
                prefixResult = prefix;
            }

            if(prefixResult === undefined || response.author.bot) return;

            const args = response.content.slice(prefixResult.length).split(' ');
            const command = args.shift().toLowerCase();

            const eventCheck = this._reservedEvents.find(event => command == event);

            if(eventCheck !== undefined) return;

            this.emit(command, response, args);
        });
    }

    async loadCommands(folder, callback) {
        const files = fs.readdirSync(path.resolve(folder));
        const loaded = [];

        //return console.log(files)

        files.map((file, index) => {
            const instance = this.requireSync(file, path.resolve(folder));

            if(instance.name !== '' && typeof instance.call == 'function') {
                loaded.push({
                    name: instance.name
                });

                this.on(instance.name, instance.call);
            } else {
                console.error(`Unable to load ${file} as it was not correctly formatted`);
            }
        })

        callback(loaded);
    }

    requireSync(file, location) {
        return require(path.join(location, file));
    }

    destroy() {
        this.removeAllListeners();
        this.super.destroy();
    }

    _extract() {

    }
}

module.exports = CommandHandler;